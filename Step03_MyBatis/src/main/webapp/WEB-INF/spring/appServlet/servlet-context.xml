<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

   <!-- 
      JNDI 데이터 소스 객체 얻어오는 설정   
      Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
       
      <Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>          
              
      서버 폴더 Servers/context.xml에 위 코드를 붙여넣는다.
   -->
   
   <!-- 
   		객체에 필요한 값을 전달할 때 숫자나 문자열은 value 속성을으로 전달하고
   		또다른 객체(bean)의 참조값을 전달할 때는  ref 속성을 이용해서 전달해야 한다.
    -->
   
   <beans:bean id="dataSource" 
      class="org.springframework.jndi.JndiObjectFactoryBean">
      <beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
   </beans:bean>
   
   <!-- 
      위는 아래의 코드와 같다
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
    -->
   
   
   <!-- 
      SqlSessionFactory 객체 
      Configuration.xml 문서가 어디에 있는지 알려야 한다. 
   -->
   <beans:bean id="sessionFactory" 
      class="org.mybatis.spring.SqlSessionFactoryBean">
      <beans:property name="dataSource" ref="dataSource"/> <!-- dataSource는 id니까 참조값 >> ref 이용해 전달 -->
      <beans:property name="configLocation"
   value="classpath:com/gura/step03/mybatis/Configuration.xml"/> <!-- classpath:~ 는 문자열이니까 >> value 이용해 전달 -->
   </beans:bean>
   <!-- 
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
    -->
   

   <!-- 
      SqlSession 인터페이스를 구현한 
      SqlSessionTemplate(SqlSession) 객체 
      Dao 가 의존하는 객체 
   -->
   
   <beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <beans:constructor-arg name="sqlSessionFactory" 
         ref="sessionFactory"/>
   </beans:bean>
   <!-- SqlSession Interface로 받아서 사용하겠다는것 -->
   
   
   <!-- 
      	위의 bean 설정을 java code 로 환산 하면 아래와 같다 
      
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
      
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
      
      new SqlSessionTemplate(sessionFactory);
 	-->     
  	<!-- 
      new SqlSessionTemplate(sessionFactory);는 DAO에 주입이 될 예정.
      interface type으로 사용된다.
      DAO 안에서 저 객체를 이용해 insert select delete 등의 작업을 함.
   -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--
		com.gura.step03 패키지와 그 하위에 있는 모든 패키지를 scan 해서
		스프링 bean 컨테이너에 관리할 객체를 생성해서 관리한다.
		- 스캔 도중 @Controller, @Service, @Repository, @Component 등의
			어노테이션이 붙어 있는 클래스가 있다면 해당 클래스로 객체를 생성해서
			스프링 bean 컨테이너에서 관리를 한다.
		무작정 @ 딱지 붙여놓는다고 bean이 되는 것이 아니고, scan 이 선행되어야 한다.
	 -->
	<context:component-scan base-package="com.gura.step03" />
	
	<!-- 어노테이션 기반으로 aop 적용할수 있도록 설정 -->
   <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

   <!-- Multipart 폼 전송 처리를 위한 bean 설정 -->
   <beans:bean id="multipartResolver"
      class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <beans:property name="maxUploadSize" value="102400000"/> 
      <!-- 파일업로드 최대 크기 설정 .현재 크기는 102400000 == 100mb -->
   </beans:bean>   
   
	
</beans:beans>
